// Define mesh boundary
int C = 1;
int D = 2;
int nx = 500;
int ny = 50;
int m = 50;
border Gamma1(t=1, 0){x=11*t;    y=0.5;   label=C;}
border Gamma2(t=1, 0){x=11;      y=0.5-0.5*t; label=C;}
border Gamma4(t=1, 0){x=0;       y=0.5*t;   label=C;}

real tracewidth = 0.1;
border TL0(t=0, 1){x=0+t; y=0; label=C;}
border TL1(t=0, 1){x=1+t; y=0; label=D;}
border TL2(t=0, 1){x=2+t; y=0; label=C;}
border TL3(t=0, 1){x=3+t; y=0; label=D;}
border TL4(t=0, 1){x=4+t; y=0; label=C;}
border TL5(t=0, 1){x=5+t; y=0; label=D;}
border TL6(t=0, 1){x=6+t; y=0; label=C;}
border TL7(t=0, 1){x=7+t; y=0; label=D;}
border TL8(t=0, 1){x=8+t; y=0; label=C;}
border TL9(t=0, 1){x=9+t; y=0; label=D;}
border TL10(t=0, 1){x=10+t; y=0; label=C;}

// The triangulated domain Th is on the left side of its boundary
mesh Th = buildmesh(Gamma1(nx) +
                    Gamma2(ny) +
                    Gamma4(ny) +
                    TL0(m) +
                    TL1(m) +
                    TL2(m) +
                    TL3(m) +
                    TL4(m) +
                    TL5(m) +
                    TL6(m) +
                    TL7(m) +
                    TL8(m) +
                    TL9(m) +
                    TL10(m));

plot(Th, wait=1);

// The finite element space defined over Th is called here Vh
fespace Vh(Th, P2);
Vh u, v;// Define u and v as piecewise-P1 continuous functions

// Define a function f
func f=0;

// Get the clock in second
real cpu=clock();

// Define the PDE
solve Laplace(u, v)
    = int2d(Th)(    // The bilinear part
          dx(u)*dx(v)
        + dy(u)*dy(v)
    )
    - int2d(Th)(    // The right hand side
          f*v
    )
    + on(C, u=-10000)
    + on(D, u=0);

// Plot the result
load "iovtk"
int[int] Order = [1];
savevtk("u.vtu", Th, u, dataname="u", order=Order);
plot(u, wait=1);

// Display the total computational time
cout << "CPU time = " << (clock()-cpu) << endl;
